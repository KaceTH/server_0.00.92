
code "0 04 01"
	↑ ↑	↑

맨 앞 숫자 : 성공 또는 실패 여부 (성공시 : 1, 실패시 : 0) (0 부터 1까지)

중간 두자리 숫자 : 페이지 넘버 (0 부터 우리가 만든 페이지 수 까지)
ex)
"01" = 로그인 페이지
"02" = 회원가입 페이지
"03" = 가입메일 인증 페이지
"04" = 아이디/비밀번호 찾기 페이지
"05" = 설정에서 비밀번호 바꾸기 페이지
"07" = 설정 페이지
"08" = 메인창 급식 페이지
"09" = 메인창 공지사항 페이지
"10" = 게시글 페이지
"11" = 게시글 작성
"12" = 시간표
.....

맨끝 두자리 숫자 : 오류 또는 성공 코드 (00 부터 99 까지)
ex ) "code" : "00102" <-- 0 (실패, 오류) 	01 ({로그인 패이지}에서) 		02 (02번 오류 발생)
ex ) "code" : "10201" <-- 1 (성공) 		02 ({회원가입 페이지}에서) 	01 (01번 요청 처리 성공)






____________________________________________________________________________________________________________________________






/(모든 패이지)/
#서버에 오류가 생겼을 때
{
	"code" : "09990",
	"message" : "서버에 오류가 생겼습니다. 나중에 다시 시도해 주십시오.",
	"status" : 500
}



/login/		(POST)

#아이디 또는 비밀번호가 일치하지 않을 때
{
	"code" : "00101",
	"message" : "해당하는 사용자 아이디 또는 비밀번호가 존재하지 않습니다. ",
	"status" : 404
}

#금지된 계정으로 로그인할 때
{
	"code" : "00102",
	"message" : "해당 사용자 아이디는 동결된 계정입니다.",
	"status" : 401
}

#일정 기간 동안 로그인 실패 한도를 초과할 때
{
	"code" : "00103",
	"message" : "횟수를 초과 하셨습니다. 나중에 다시 시도해 주십시오.",
	"status" : 403
}

#해외 로그인 차단시 해외로그인을 시도할 때
{
	"code" : "00104",
	"message" : "해외 로그인할 수 없습니다.",
	"status" : 401
}

#로그인을 성공했을 때
{
	"code" : "10101",
	"message" : "로그인이 완료되었습니다. ",
	"status" : 200,
	"info" : {
		"access_token" : "(토큰넘버)",
		"refresh_token" : "(토큰넘버)",
		"user_id : " : "(유저 아이디)",
		"name" : "(사용자 이름)"
	}
}



/user/		(POST)

#해당 아이디가 이미 사용되고 있을 때
{
	"code" : "00201",
	"message" : "해당 아이디는 중복됩니다.",
	"status" : 405
}

#학생 번호 또는 이름이 이미 사용되고 있을 때
{
	"code" : "00202",
	"message" : "해당 학생 또는 학생번호를 이용하는 사용자가 이미 존재합니다.",
	"status" : 405
}

#메일인증을 실패했을 때
{
	"code" : "00203",
	"message" : "메일인증을 실패하였습니다.",
	"status" : 400
}

#아이디 형식이 잘못되었을 때
{
	"code" : "00204",
	"message" : "아이디 형식이 올바르지 않습니다.",
	"status" : 400,
	"info" : {
		"rules" : "특수문자는 '_'만 포함될 수 있습니다. \n 아이디는 4~24글자입니다.\n 공백 문자는 사용할 수 없습니다."
	}
}

#비밀번호 형식이 잘못되었을 때
{
	"code" : "00205",
	"message" : "비밀번호 형식이 올바르지 않습니다.",
	"status" : 400,
	"info" : {
		"rules" : "특수문자는 '_ . ! @ ~'만 포함될 수 있습니다. \n 비밀번호는 7~24글자입니다.\n 공백 문자는 사용할 수 없습니다."
	}
}

#정상적으로 회원가입이 완료되었을 때
{
	"code" : "10201",
	"message" : "회원가입이 완료 되었습니다.",
	"status" : 201,
	"info" : {
		"user_id" : "(사용자 아이디)",
		"name" : "(사용자 실명)",
		"mail" : "(메일)",
		"grade_number" : "(학년)",
		"student_number" : "(번호)",
		"class_number" : "(반)",
		"user_type" : "student(유저신분)"
	}
}



/email_pass/<user_id>/		(GET)

#메일의 형식이 올바르지 않을 때
{
	"code" : "00301",
	"message" : "형식이 올바르지 않습니다.",
	"status" : 400,
	"info" : {
		"exemple" : "123456@example.com"
	}
}

#유저 아이디가 존재하지 않을 때
{
	"code" : "00302",
	"message" : "<user_id>라는 유저는 존재하지않습니다.",
	"status": 404 
}

#메일 인증을 이미 완료하였을 때
{
	"code" : "00303",
	"message" : "메일 인증을 이미 완료하였습니다",
	"status": 403 
}

#메일 인증코드를 보냈을 때
{
	"code" : "10301",
	"message" : "메일인증코드를 전송하였습니다.",
	"status" : 200,
	"info" : {
		"user_id" : "사용자 아이디",
		"email" : "(메일)"
	}
}

/email_pass/<user_id>/		(POST)

#인증 요청이 존재하지 않을 때
{
	"code" : "00304",
	"message" : "메일 인증이 존재하지 않습니다.",
	"status": 404
}

#인증 요청기한이 지났을 때
{
	"code" : "00305",
	"message" : "기간이 만료되었습니다.",
	"status": 400
}

#메일 인증을 성공했을 때
{
	"code" : "10302",
	"message" : "메일인증을 완료하였습니다.",
	"status" : 200,
	"info" : {
		"user_id" : "사용자 아이디",
		"mail" : "(메일)"
	}
}


/email/<user_id>/change		(POST)

#비밀번호를 성공적으로 바꿨을 때
{
	"code" : 10401,
	"message" : "비밀번호 변경이 완료 되었습니다.",
	"status" : 201,
}

#비밀번호 형식이 잘못되었을 때
{
	"code" : 00401,
	"message" : "비밀번호 형식이 올바르지 않습니다.",
	"status" : 400,
	"info" : {
		"rules" : "특수문자는 '_ . ! @ ~'만 포함될 수 있습니다. \n 비밀번호는 7~24글자입니다.\n 공백 문자는 사용할 수 없습니다."
	}
}

#비밀번호가 다를 때
{
	"code" : "00402",
	"message" : "비밀번호가 확인번호와 같지 않습니다.",
	"status" : "400"
}

#유저 아이디가 존재하지 않거나 비밀번호가 일치하지 않을 때
{
	"code" : "00403",
	"message" : "일치하는 유저기 존재하지 않습니다.",
	"status": 404 
}

#유효기간이 만료되었을 때	
{
	"code" : "00404",
	"message" : "이메일 인증을 다시 시도하여 주십시요.",
	"status": 400
}


/user/<user_id>/change/		(POST)

#비밀번호를 성공적으로 바꿨을 때
{
	"code" : 10501,
	"message" : "비밀번호 변경이 완료 되었습니다.",
	"status" : 201,
}

#비밀번호 형식이 잘못되었을 때
{
	"code" : 00501,
	"message" : "비밀번호 형식이 올바르지 않습니다.",
	"status" : 400,
	"info" : {
		"rules" : "특수문자는 '_ . ! @ ~'만 포함될 수 있습니다. \n 비밀번호는 7~24글자입니다.\n 공백 문자는 사용할 수 없습니다."
	}
}

#비밀번호가 기존 비밀번호와 같을 때
{
	"code" : "00502",
	"message" : "기존의 비밀번호와 다른 비밀번호를 입력해 주십시오.",
	"status" : "400"
}

#유저 아이디가 존재하지 않을 때
{
	"code" : "00503",
	"message" : "<user_id>라는 유저는 존재하지않습니다.",
	"status": 404 
}


/user/<user_id>/		(GET)

#유저 아이디가 존재하지 않을 때
{
	"code" : 00702,
	"message" : "<user_id>라는 유저는 존재하지않습니다.",
	"status": 404 
}

{
	"code" : 10701,
	"message" : "회원정보를 불러왔습니다.",
	"status" : 200,
	"info" : {
		"user_id" : "(사용자 아이디)",
        	"name" : "(사용자 실명)",
        	"mail" : "(메일)",
        	"grade_number" : "(학년)",
        	"student_number" : "(번호)",
		"class_number" : "(반)",
		"profile_picture" : "http://example.com/images/<user_id>/(유저 프로필 사진)"
	}
}



/user/<user_id>/ 		(PUT)

#비밀번호 컨펌 틀렸을 때
{
	"code" : 00701,
	"message" : "인증을 실패했습니다.",
	"status" : "401" 
}

#유저 아이디가 존재하지 않을 때
{
	"code" : 00702,
	"message" : "<user_id>라는 유저는 존재하지않습니다.",
	"status": 404 
}

#다른 유저가 해당 메일을 이미 사용 중일 때
{
	"code" : 00704,
	"message" : "메일을 이용중인 사용자가 이미 존재합니다.",
	"status": 400
}

#학생 번호 또는 이름이 이미 사용되고 있을 때
{
	"code" : "00705",
	"message" : "해당 학생 또는 학생번호를 이용하는 사용자가 이미 존재합니다.",
	"status" : 405
}

#회원정보 바꾸기를 성공했을 때
{
	"code" : 10702,
	"message" : "회원정보가 바뀌었습니다.",
	"status" : 201,
	"info" : {
		"user_id" : "(사용자 아이디)",
        	"name" : "(사용자 실명)",
        	"mail" : "(메일)",
        	"grade_number" : "(학년)",
        	"student_number" : "(번호)",
		"class_number" : "(반)"
	}
}



/user/<user_id>/ 		(DELETE)

#유저 정보를 지우는 것을 성공했을 때
{
	"code" : 10703,
	"message" : "회원 탈퇴가 정상적으로 완료되었습니다.",
	"status" : 205
}

#확인 비밀번호가 일치 하지 않을 때
{
	"code" : 00703,
	"message" : "비밀번호가 일치 하지 않습니다."
	"status": 404 
}



/mealtable/

query : "timecode", "mealcode"

timecode = 연도 월 일, 6자리 혹은 8자리 (ex 202208, 20220811)
mealcode = 받을 급식의 시간대 (1 = 아침, 2 = 점심, 3 = 저녁) 

ex ) /mealtable/?timecode=202208 				--> 2022년 08월의 모든 급식 메뉴 불러오기
ex ) /mealtable/?timecode=20220811&mealcode=3		--> 2022년 08월 11일의 저녁 메뉴 불러오기

#급식 메뉴를 불러왔을 때
{
	"code" : 10801,
	"message" : "급식 메뉴를 성공적으로 불러 왔습니다.",
	"status" : 200,
	"info" : [
		"menu" : {
			"date" : "(날짜)",
			"breakfast" : "(아침 급식)",
			"lunch" : "(점심 급식)",
			"dinner" : "(저녁 급식)"
		},
		"menu" : {
			"date" : "(날짜)",
			"breakfast" : "(아침 급식)",
			"lunch" : "(점심 급식)",
			"dinner" : "(저녁 급식)"
		},
		"menu" : {
			"date" : "(날짜)",
			"breakfast" : "(아침 급식)",
			"lunch" : "(점심 급식)",
			"dinner" : "(저녁 급식)"
		},
		...
	]
}


/mealtable/update/

#급식 메뉴를 불러왔을 때
{
	"code" : 10802,
	"message" : "이번달 전채 급식 메뉴를 성공적으로 불러 왔습니다.",
	"status" : 200,
	"info" : {
		"menu" : {
			"date" : "(날짜)",
			"breakfast" : "(아침 급식)",
			"lunch" : "(점심 급식)",
			"dinner" : "(저녁 급식)"
		},
		"menu" : {
			"date" : "(날짜)",
			"breakfast" : "(아침 급식)",
			"lunch" : "(점심 급식)",
			"dinner" : "(저녁 급식)"
		},
		"menu" : {
			"date" : "(날짜)",
			"breakfast" : "(아침 급식)",
			"lunch" : "(점심 급식)",
			"dinner" : "(저녁 급식)"
		},
		...
	}
}

#잘못된 문법의 급식코드 또는 시간코드를 받았을 때
{
	"code" : 00801,
	"message" : "잘못된 문법입니다."
	"status" : 400
}



/notice/		(GET)

query : page, gradecode

gradecode : 학년 (1, 2, 3)
page : 페이지(10 개씩 출력, 1부터 시작)

ex ) /notice/?page=1 		--> 공지사항 1부터 10까지 최신순으로 조회
ex ) /notice/?grade=3&page=2 --> 3학년의 공지사항을 최신순으로 10부터 20까지 조회


#공지사항을 불러 왔을 때
{
	"code" : "10091",
	"message" : "공지사항를 성공적으로 불러 왔습니다.",
	"status" : 200,
	"info" : {
		{
			"create_at" : "(생성 날짜)",
			"update_at" : "(수정 날짜)",
			"id" : "(포스트 아이디)",
			"title" : "(게시물 제목)",
            "category" : (카테고리 넘버),
			"content" : "(게시물 내용)",
			"user_id" :  "user_id" : "(아이디)",
			"grade_number" : (학년)

		}
	}
}



/board/		(GET)

query

ex ) /notice/?page=1 		--> 공지사항 1부터 10까지 최신순으로 조회

#개시판을 불러 왔을 때
{
	"code" : 11001,
	"message" : "게시판 목록을 불러 왔습니다.",
	"status" : 200,
	"info" : [
		{
			"id" : "(포스트 아이디)",
			"title" : "(게시물 제목)",
              		"category" : (카테고리 넘버),
			"user_id" :  "user_id" : "(아이디)",
			"grade_number" : (학년)

		}
		{
			"id" : "(포스트 아이디)",
			"title" : "(게시물 제목)",
              		"category" : (카테고리 넘버),
			"user_id" :  "user_id" : "(아이디)",
			"grade_number" : (학년)

		}
		...
	]
}



/board/<post_id>/			(GET)

#게시글을 불러왔을 떄
{
	"code" : 11002,
	"message" : "게시글을 불러 왔습니다.",
	"status" : 200,
	info : {
		"create_at" : "(생성 날짜)",
		"update_at" : "(수정 날짜)",
		"id" : "(포스트 아이디)",
		"title" : "(게시물 제목)",
              	"category" : (카테고리 넘버),
		"content" : "(게시물 내용)",
		"user_id" :  "user_id" : "(아이디)",
		"grade_number" : (학년)
		}
		"likes_count" : (좋아요 수),
		"comments" : [
			{
				"user_id" : "(아이디)",
				"grade_number" : (학년),
				"comment"
			}
			{
				"user_id" : "(아이디)",
				"grade_number" : (학년),
				"comment"
			}
			...
		]
	}
}

#<post_id>의 게시물 아이디가 존재하지 않을 때
{
	"code" : 01001,
	"message" : "게시글이 삭제 되었거나 존재하지 않습니다.",
	"status" : 404
}



/board/		(POST)

#제목을 작성하지 않았을 때
{
	"code" : 01101,
	"message" : "제목을 입력해 주세요.",
	"status" : 406

}

#작성자가 존재하지 않을 때
{
	"code" : 01102,
	"message" : "유저가 존재하지 않습니다.",
	"status" : 404
}

#게시글을 올렸을 때
{
	"code" : 11101,
	"message" : "게시글을 성공적으로 올렸습니다.",
	"status" : 201
}

#Json 형식이 잘못 되었을 때
{
	"code" : "01110",
	"message" : "Json 형식이 잘못되었습니다.",
	"status" : 400	
}


/board/<post_id>		(PUT)
#게시글 수정을 완료 했을 때
{
	"code" : 11101,
	"message" : "게시글을 성공적으로 수정하였습니다.",
	"status" : 201
}

#게시글이 존재하지 않을 때
{
	"code" : "01102",
	"message" : "개시글을 존재하지 않습니다.",
	"status" : 404
}

#Json 문법이 잘못되었을 때
{
	"code" : "01102",
	"message" : "문법이 잘못 되었습니다.",
	"status" : 405,
	"info" : {
		"response" : "(자신이 보낸 내용)"
	}
}


/board/<post_id>		(DELETE)

#게시글을 삭제했을 때
{
	"code" : 11102,
	"message" : "게시글을 성공적으로 삭제하였습니다.",
	"status" : 200
}



/schedule/

#시간표를 불러왔을 때
{
	"code" : 11201,
	"message" : "시간표를 불러 왔습니다."
	"status" : 200,
	"info" : {
		Mon : {
			"1" : "(과목)",
			"2" : "(과목)",
			"3" : "(과목)",
			"4" : "(과목)",
			"5" : "(과목)",
			"6" : "(과목)",
			"7" : "(과목)",
			"8" : "(과목)",
		}
		Tue : {
			"1" : "(과목)",
			"2" : "(과목)",
			"3" : "(과목)",
			"4" : "(과목)",
			"5" : "(과목)",
			"6" : "(과목)",
			"7" : "(과목)",
			"8" : "(과목)",
		}
		Wed : {
			"1" : "(과목)",
			"2" : "(과목)",
			"3" : "(과목)",
			"4" : "(과목)",
			"5" : "(과목)",
			"6" : "(과목)",
			"7" : "(과목)",
			"8" : "(과목)",
		}
		Thu : {
			"1" : "(과목)",
			"2" : "(과목)",
			"3" : "(과목)",
			"4" : "(과목)",
			"5" : "(과목)",
			"6" : "(과목)",
			"7" : "(과목)",
			"8" : "(과목)",
		}
		Fri : {
			"1" : "(과목)",
			"2" : "(과목)",
			"3" : "(과목)",
			"4" : "(과목)",
			"5" : "(과목)",
			"6" : "(과목)",
			"7" : "(과목)",
			"8" : "(과목)",
		}
	}
}


